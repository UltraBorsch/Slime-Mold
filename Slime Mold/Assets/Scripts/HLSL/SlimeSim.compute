// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update
#pragma kernel ProcessImage

//perhaps modify so that each agent can have a different speed
struct Agent {
    float2 position;
    float2 direction;
};

RWStructuredBuffer<Agent> agents;
RWTexture2D<float4> trailMap, processedTrailMap;

uint numAgents, width, height;
float moveSpeed, deltaTime, PI, evaporateSpeed, diffuseSpeed;

uint hash (uint state) {
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

bool outOfBounds (float2 position) {
    return position.x < 0 || position.x >= width || position.y < 0 || position.y >= height;
}

bool outOfBounds (uint2 position) {
    return position.x < 0 || position.x >= width || position.y < 0 || position.y >= height;
}

float scaleToRange01 (uint input) {
    return input / 4294967295.0;
}

[numthreads(16, 1, 1)]
void Update (uint3 id : SV_DispatchThreadID) {
    if (id.x >= numAgents) return;
    
    Agent agent = agents[id.x];
    
    uint rand = hash(agent.position.y * width + agent.position.x + hash(id.x + deltaTime * 100000));

    //get new position based on direction and current position
    float2 newPos = agent.position + agent.direction * moveSpeed * deltaTime;
    
    //deal with map boundaries
    //improvement ccould be detect which boundary is being crossed, and choose a valid angle on the first try to avoid getting stuck
    if (outOfBounds(newPos)) {
        newPos.x = min(width - 1, max(0, newPos.x));
        newPos.y = min(height - 1, max(0, newPos.y));
        float newAngle = scaleToRange01(rand) * 2.0 * PI;
        agents[id.x].direction = float2(cos(newAngle), sin(newAngle));
    }
    
    //set new pos and draw the trail
    agents[id.x].position = newPos;
    trailMap[int2(newPos.x, newPos.y)] = 1;
}

[numthreads(8, 8, 1)]
void ProcessImage (uint3 id : SV_DispatchThreadID) {
    if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) return;
    
    float4 sum = 0;
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            int sampleX = id.x + x, sampleY = id.y + y;
            
            if (!outOfBounds(int2(sampleX, sampleY))) 
                sum += trailMap[int2(sampleX, sampleY)];
        }
    }
    
    float4 blurResult = sum / 9.0;
    float4 originalValue = trailMap[id.xy];
    
    //blend (lerp) between the original value and the diffused value over time
    float4 diffusedValue = lerp(originalValue, blurResult, diffuseSpeed * deltaTime);
    
    //subtract from the diffused value to simulate evaporation
    float4 diffusedAndEvaporatedValue = max(0, diffusedValue - evaporateSpeed * deltaTime);
    
    processedTrailMap[id.xy] = diffusedAndEvaporatedValue;
}
